/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        Scanner sc=new Scanner(System.in);
        if(l1==null)
        {
            return l2;
        }
        if(l2==null)
        {
            return l1;
        }
        if(l1.val<l2.val)
        {
            l1.next=mergeTwoLists(l1.next,l2);
            return l1;
        }
        else
        {
            l2.next=mergeTwoLists(l1,l2.next);
            return l2;
        }
    }
}


//Solution 2
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        Scanner sc=new Scanner(System.in);
        ListNode head=new ListNode(0);
        ListNode n=head;
        while(l1!=null && l2!=null)
        {
             System.out.println("here");
            if(l1.val<l2.val)
            {
                head.next=l1;
                head=head.next;
                l1=l1.next;
            }
            else
            {
                head.next=l2;
                head=head.next;
                l2=l2.next;
            }
        }
        System.out.println("here");
        if(l1==null)
        {
            while(l2!=null)
                {head.next=l2;
                head=head.next;
                l2=l2.next;}
        }
        if(l2==null)
        {
            while(l1!=null)
                {
                head.next=l1;
                head=head.next;
                l1=l1.next;}
        }
        return n.next;
    }
    
}



Solution3//
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        Scanner sc=new Scanner(System.in);
        if(l1==null)
        {
            return l2;
        }
        if(l2==null)
        {
            return l1;
        }
        ListNode head;
        if(l1.val<l2.val)
        {
            head=l1;
            head.next=mergeTwoLists(l1.next,l2);
        }
        else
        {
            head=l2;
            head.next=mergeTwoLists(l1,l2.next);
        }
    return head;
    }
}
